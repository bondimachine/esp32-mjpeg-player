#include <Arduino.h>
#include <JPEGDEC.h>
#include <WiFi.h>
#include <AsyncUDP.h>
#include "font.h"

#include <esp_task_wdt.h>

#include "config.h"
AsyncUDP udp;

#include "video_out.h"

JPEGDEC jpeg;

#define BUFFERED_FRAMES 20
#define RAW_FRAME_BUFFER_FRAMES 16
#define MAX_FRAME_BUFFER 4000
#define PER_FRAME_DELAY_MS 40 // 25 fps

uint8_t rawFrameBuffer[MAX_FRAME_BUFFER * RAW_FRAME_BUFFER_FRAMES];

struct PacketBuffer {
  uint8_t* data;
  uint16_t size;
};

struct PacketBuffer buffer[BUFFERED_FRAMES];
uint32_t readIndex = 0;
volatile uint32_t writeIndex = 0;
bool discard = false;

uint32_t blacknwhite_4_phase_pal[] = {
    0x18181818,0x18181818,0x18181818,0x19191919,0x19191919,0x19191919,0x19191919,0x19191919,
    0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1B1B1B1B,0x1B1B1B1B,
    0x1B1B1B1B,0x1B1B1B1B,0x1B1B1B1B,0x1C1C1C1C,0x1C1C1C1C,0x1C1C1C1C,0x1C1C1C1C,0x1C1C1C1C,
    0x1D1D1D1D,0x1D1D1D1D,0x1D1D1D1D,0x1D1D1D1D,0x1D1D1D1D,0x1E1E1E1E,0x1E1E1E1E,0x1E1E1E1E,
    0x1E1E1E1E,0x1E1E1E1E,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,
    0x20202020,0x20202020,0x20202020,0x20202020,0x20202020,0x21212121,0x21212121,0x21212121,
    0x21212121,0x21212121,0x22222222,0x22222222,0x22222222,0x22222222,0x22222222,0x23232323,
    0x23232323,0x23232323,0x23232323,0x23232323,0x24242424,0x24242424,0x24242424,0x24242424,
    0x24242424,0x24242424,0x25252525,0x25252525,0x25252525,0x25252525,0x25252525,0x26262626,
    0x26262626,0x26262626,0x26262626,0x26262626,0x27272727,0x27272727,0x27272727,0x27272727,
    0x27272727,0x28282828,0x28282828,0x28282828,0x28282828,0x28282828,0x29292929,0x29292929,
    0x29292929,0x29292929,0x29292929,0x29292929,0x2A2A2A2A,0x2A2A2A2A,0x2A2A2A2A,0x2A2A2A2A,
    0x2A2A2A2A,0x2B2B2B2B,0x2B2B2B2B,0x2B2B2B2B,0x2B2B2B2B,0x2B2B2B2B,0x2C2C2C2C,0x2C2C2C2C,
    0x2C2C2C2C,0x2C2C2C2C,0x2C2C2C2C,0x2D2D2D2D,0x2D2D2D2D,0x2D2D2D2D,0x2D2D2D2D,0x2D2D2D2D,
    0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2F2F2F2F,0x2F2F2F2F,
    0x2F2F2F2F,0x2F2F2F2F,0x2F2F2F2F,0x30303030,0x30303030,0x30303030,0x30303030,0x30303030,
    0x31313131,0x31313131,0x31313131,0x31313131,0x31313131,0x32323232,0x32323232,0x32323232,
    0x32323232,0x32323232,0x33333333,0x33333333,0x33333333,0x33333333,0x33333333,0x33333333,
    0x34343434,0x34343434,0x34343434,0x34343434,0x34343434,0x35353535,0x35353535,0x35353535,
    0x35353535,0x35353535,0x36363636,0x36363636,0x36363636,0x36363636,0x36363636,0x37373737,
    0x37373737,0x37373737,0x37373737,0x37373737,0x38383838,0x38383838,0x38383838,0x38383838,
    0x38383838,0x38383838,0x39393939,0x39393939,0x39393939,0x39393939,0x39393939,0x3A3A3A3A,
    0x3A3A3A3A,0x3A3A3A3A,0x3A3A3A3A,0x3A3A3A3A,0x3B3B3B3B,0x3B3B3B3B,0x3B3B3B3B,0x3B3B3B3B,
    0x3B3B3B3B,0x3C3C3C3C,0x3C3C3C3C,0x3C3C3C3C,0x3C3C3C3C,0x3C3C3C3C,0x3D3D3D3D,0x3D3D3D3D,
    0x3D3D3D3D,0x3D3D3D3D,0x3D3D3D3D,0x3D3D3D3D,0x3E3E3E3E,0x3E3E3E3E,0x3E3E3E3E,0x3E3E3E3E,
    0x3E3E3E3E,0x3F3F3F3F,0x3F3F3F3F,0x3F3F3F3F,0x3F3F3F3F,0x3F3F3F3F,0x40404040,0x40404040,
    0x40404040,0x40404040,0x40404040,0x41414141,0x41414141,0x41414141,0x41414141,0x41414141,
    0x42424242,0x42424242,0x42424242,0x42424242,0x42424242,0x42424242,0x43434343,0x43434343,
    0x43434343,0x43434343,0x43434343,0x44444444,0x44444444,0x44444444,0x44444444,0x44444444,
    0x45454545,0x45454545,0x45454545,0x45454545,0x45454545,0x46464646,0x46464646,0x46464646,
    0x46464646,0x46464646,0x47474747,0x47474747,0x47474747,0x47474747,0x47474747,0x47474747,
    0x48484848,0x48484848,0x48484848,0x48484848,0x48484848,0x49494949,0x49494949,0x00000000,
    //odd
    0x18181818,0x18181818,0x18181818,0x19191919,0x19191919,0x19191919,0x19191919,0x19191919,
    0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1A1A1A1A,0x1B1B1B1B,0x1B1B1B1B,
    0x1B1B1B1B,0x1B1B1B1B,0x1B1B1B1B,0x1C1C1C1C,0x1C1C1C1C,0x1C1C1C1C,0x1C1C1C1C,0x1C1C1C1C,
    0x1D1D1D1D,0x1D1D1D1D,0x1D1D1D1D,0x1D1D1D1D,0x1D1D1D1D,0x1E1E1E1E,0x1E1E1E1E,0x1E1E1E1E,
    0x1E1E1E1E,0x1E1E1E1E,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,0x1F1F1F1F,
    0x20202020,0x20202020,0x20202020,0x20202020,0x20202020,0x21212121,0x21212121,0x21212121,
    0x21212121,0x21212121,0x22222222,0x22222222,0x22222222,0x22222222,0x22222222,0x23232323,
    0x23232323,0x23232323,0x23232323,0x23232323,0x24242424,0x24242424,0x24242424,0x24242424,
    0x24242424,0x24242424,0x25252525,0x25252525,0x25252525,0x25252525,0x25252525,0x26262626,
    0x26262626,0x26262626,0x26262626,0x26262626,0x27272727,0x27272727,0x27272727,0x27272727,
    0x27272727,0x28282828,0x28282828,0x28282828,0x28282828,0x28282828,0x29292929,0x29292929,
    0x29292929,0x29292929,0x29292929,0x29292929,0x2A2A2A2A,0x2A2A2A2A,0x2A2A2A2A,0x2A2A2A2A,
    0x2A2A2A2A,0x2B2B2B2B,0x2B2B2B2B,0x2B2B2B2B,0x2B2B2B2B,0x2B2B2B2B,0x2C2C2C2C,0x2C2C2C2C,
    0x2C2C2C2C,0x2C2C2C2C,0x2C2C2C2C,0x2D2D2D2D,0x2D2D2D2D,0x2D2D2D2D,0x2D2D2D2D,0x2D2D2D2D,
    0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2E2E2E2E,0x2F2F2F2F,0x2F2F2F2F,
    0x2F2F2F2F,0x2F2F2F2F,0x2F2F2F2F,0x30303030,0x30303030,0x30303030,0x30303030,0x30303030,
    0x31313131,0x31313131,0x31313131,0x31313131,0x31313131,0x32323232,0x32323232,0x32323232,
    0x32323232,0x32323232,0x33333333,0x33333333,0x33333333,0x33333333,0x33333333,0x33333333,
    0x34343434,0x34343434,0x34343434,0x34343434,0x34343434,0x35353535,0x35353535,0x35353535,
    0x35353535,0x35353535,0x36363636,0x36363636,0x36363636,0x36363636,0x36363636,0x37373737,
    0x37373737,0x37373737,0x37373737,0x37373737,0x38383838,0x38383838,0x38383838,0x38383838,
    0x38383838,0x38383838,0x39393939,0x39393939,0x39393939,0x39393939,0x39393939,0x3A3A3A3A,
    0x3A3A3A3A,0x3A3A3A3A,0x3A3A3A3A,0x3A3A3A3A,0x3B3B3B3B,0x3B3B3B3B,0x3B3B3B3B,0x3B3B3B3B,
    0x3B3B3B3B,0x3C3C3C3C,0x3C3C3C3C,0x3C3C3C3C,0x3C3C3C3C,0x3C3C3C3C,0x3D3D3D3D,0x3D3D3D3D,
    0x3D3D3D3D,0x3D3D3D3D,0x3D3D3D3D,0x3D3D3D3D,0x3E3E3E3E,0x3E3E3E3E,0x3E3E3E3E,0x3E3E3E3E,
    0x3E3E3E3E,0x3F3F3F3F,0x3F3F3F3F,0x3F3F3F3F,0x3F3F3F3F,0x3F3F3F3F,0x40404040,0x40404040,
    0x40404040,0x40404040,0x40404040,0x41414141,0x41414141,0x41414141,0x41414141,0x41414141,
    0x42424242,0x42424242,0x42424242,0x42424242,0x42424242,0x42424242,0x43434343,0x43434343,
    0x43434343,0x43434343,0x43434343,0x44444444,0x44444444,0x44444444,0x44444444,0x44444444,
    0x45454545,0x45454545,0x45454545,0x45454545,0x45454545,0x46464646,0x46464646,0x46464646,
    0x46464646,0x46464646,0x47474747,0x47474747,0x47474747,0x47474747,0x47474747,0x47474747,
    0x48484848,0x48484848,0x48484848,0x48484848,0x48484848,0x49494949,0x49494949,0x00000001,
};

/*

const static DRAM_ATTR uint32_t ntsc_RGB332[256] = {
    0x18181818,0x18171A1C,0x1A151D22,0x1B141F26,0x1D1C1A1B,0x1E1B1C20,0x20191F26,0x2119222A,
    0x23201C1F,0x241F1E24,0x251E222A,0x261D242E,0x29241F23,0x2A232128,0x2B22242E,0x2C212632,
    0x2E282127,0x2F27232C,0x31262732,0x32252936,0x342C232B,0x352B2630,0x372A2936,0x38292B3A,
    0x3A30262F,0x3B2F2833,0x3C2E2B3A,0x3D2D2E3E,0x40352834,0x41342B38,0x43332E3E,0x44323042,
    0x181B1B18,0x191A1D1C,0x1B192022,0x1C182327,0x1E1F1D1C,0x1F1E2020,0x201D2326,0x211C252B,
    0x24232020,0x25222224,0x2621252A,0x2720272F,0x29272224,0x2A262428,0x2C25282E,0x2D242A33,
    0x2F2B2428,0x302A272C,0x32292A32,0x33282C37,0x352F272C,0x362E2930,0x372D2C36,0x382C2F3B,
    0x3B332930,0x3C332B34,0x3D312F3A,0x3E30313F,0x41382C35,0x42372E39,0x4336313F,0x44353443,
    0x191E1E19,0x1A1D211D,0x1B1C2423,0x1C1B2628,0x1F22211D,0x20212321,0x21202627,0x221F292C,
    0x24262321,0x25252525,0x2724292B,0x28232B30,0x2A2A2625,0x2B292829,0x2D282B2F,0x2E272D34,
    0x302E2829,0x312E2A2D,0x322C2D33,0x332B3038,0x36332A2D,0x37322C31,0x38303037,0x392F323C,
    0x3B372D31,0x3C362F35,0x3E35323B,0x3F343440,0x423B2F36,0x423A313A,0x44393540,0x45383744,
    0x1A21221A,0x1B20241E,0x1C1F2724,0x1D1E2A29,0x1F25241E,0x20242622,0x22232A28,0x23222C2D,
    0x25292722,0x26292926,0x27272C2C,0x28262E30,0x2B2E2926,0x2C2D2B2A,0x2D2B2E30,0x2E2A3134,
    0x31322B2A,0x32312E2E,0x332F3134,0x342F3338,0x36362E2E,0x37353032,0x39343338,0x3A33363C,
    0x3C3A3032,0x3D393236,0x3E38363C,0x3F373840,0x423E3337,0x433E353B,0x453C3841,0x463B3A45,
    0x1A24251B,0x1B24271F,0x1D222B25,0x1E212D29,0x2029281F,0x21282A23,0x22262D29,0x23252F2D,
    0x262D2A23,0x272C2C27,0x282A2F2D,0x292A3231,0x2C312C27,0x2C302F2B,0x2E2F3231,0x2F2E3435,
    0x31352F2B,0x3234312F,0x34333435,0x35323739,0x3739312F,0x38383333,0x39373739,0x3A36393D,
    0x3D3D3433,0x3E3C3637,0x3F3B393D,0x403A3B41,0x43423637,0x4441383B,0x453F3C42,0x463F3E46,
    0x1B28291C,0x1C272B20,0x1D252E26,0x1E25302A,0x212C2B20,0x222B2D24,0x232A312A,0x2429332E,
    0x26302D24,0x272F3028,0x292E332E,0x2A2D3532,0x2C343028,0x2D33322C,0x2F323532,0x30313836,
    0x3238322C,0x33373430,0x34363836,0x35353A3A,0x383C3530,0x393B3734,0x3A3A3A3A,0x3B393C3E,
    0x3D403734,0x3E403938,0x403E3C3E,0x413D3F42,0x44453A38,0x45443C3C,0x46433F42,0x47424147,
    0x1C2B2C1D,0x1D2A2E21,0x1E293227,0x1F28342B,0x212F2E21,0x222E3125,0x242D342B,0x252C362F,
    0x27333125,0x28323329,0x2A31362F,0x2B303933,0x2D373329,0x2E36352D,0x2F353933,0x30343B37,
    0x333B362D,0x343B3831,0x35393B37,0x36383D3B,0x38403831,0x393F3A35,0x3B3D3E3B,0x3C3C403F,
    0x3E443A35,0x3F433D39,0x4141403F,0x42414243,0x44483D39,0x45473F3D,0x47464243,0x48454548,
    0x1C2E301E,0x1D2E3222,0x1F2C3528,0x202B382C,0x22333222,0x23323426,0x2530382C,0x262F3A30,
    0x28373526,0x2936372A,0x2A343A30,0x2B343C34,0x2E3B372A,0x2F3A392E,0x30393C34,0x31383F38,
    0x333F392E,0x343E3C32,0x363D3F38,0x373C413C,0x39433C32,0x3A423E36,0x3C41413C,0x3D404440,
    0x3F473E36,0x4046403A,0x41454440,0x42444644,0x454C413A,0x464B433E,0x47494644,0x49494949,
};

const static DRAM_ATTR uint32_t pal_yuyv[] = {
    0x18181818,0x1A16191E,0x1E121A26,0x21101A2C,0x1E1D1A1B,0x211B1A20,0x25171B29,0x27151C2E,
    0x25231B1E,0x27201C23,0x2B1D1D2B,0x2E1A1E31,0x2B281D20,0x2E261E26,0x31221F2E,0x34202034,
    0x322D1F23,0x342B2029,0x38282131,0x3A252137,0x38332126,0x3A30212B,0x3E2D2234,0x412A2339,
    0x3E382229,0x4136232E,0x44322436,0x4730253C,0x453E242C,0x483C2531,0x4B382639,0x4E36273F,
    0x171B1D19,0x1A181E1F,0x1D151F27,0x20121F2D,0x1E201F1C,0x201E1F22,0x241A202A,0x26182130,
    0x2425201F,0x27232124,0x2A20222D,0x2D1D2332,0x2A2B2222,0x2D282327,0x3125242F,0x33222435,
    0x31302424,0x332E242A,0x372A2632,0x3A282638,0x37362627,0x3A33262D,0x3D302735,0x402D283B,
    0x3E3B272A,0x4039282F,0x44352938,0x46332A3D,0x4441292D,0x473E2A32,0x4B3B2B3B,0x4D382C40,
    0x171D221B,0x191B2220,0x1D182329,0x1F15242E,0x1D23231E,0x1F202423,0x231D252B,0x261A2631,
    0x23282520,0x26262626,0x2A22272E,0x2C202834,0x2A2E2723,0x2C2B2829,0x30282931,0x33252937,
    0x30332926,0x3331292B,0x362D2A34,0x392B2B39,0x36382A29,0x39362B2E,0x3D322C36,0x3F302D3C,
    0x3D3E2C2B,0x3F3B2D31,0x43382E39,0x46352F3F,0x44432E2E,0x46412F34,0x4A3E303C,0x4D3B3042,
    0x1620271C,0x181E2722,0x1C1A282A,0x1F182930,0x1C26281F,0x1F232924,0x22202A2D,0x251D2B32,
    0x232B2A22,0x25292B27,0x29252C30,0x2B232C35,0x29302C24,0x2C2E2C2A,0x2F2A2D32,0x32282E38,
    0x2F362D27,0x32332E2D,0x36302F35,0x382D303B,0x363B2F2A,0x38393030,0x3C353138,0x3F33323E,
    0x3C40312D,0x3F3E3232,0x423A333B,0x45383340,0x43463330,0x46443435,0x4940353E,0x4C3E3543,
    0x15232B1E,0x18212C23,0x1B1D2D2B,0x1E1B2E31,0x1C282D20,0x1E262E26,0x22222F2E,0x24202F34,
    0x222E2F23,0x242B3029,0x28283131,0x2B253137,0x28333126,0x2B31312B,0x2F2D3234,0x312B3339,
    0x2F383229,0x3136332E,0x35323436,0x3730353C,0x353E342B,0x383B3531,0x3B383639,0x3E35363F,
    0x3B43362E,0x3E413634,0x423D373C,0x443B3842,0x42493831,0x45473837,0x4943393F,0x4B413A45,
    0x1526301F,0x17233125,0x1B20322D,0x1D1D3333,0x1B2B3222,0x1D293327,0x21253430,0x24233435,
    0x21303425,0x242E342A,0x272A3532,0x2A283638,0x28363527,0x2A33362D,0x2E303735,0x302D383B,
    0x2E3B372A,0x30393830,0x34353938,0x37333A3E,0x3440392D,0x373E3A32,0x3B3B3B3B,0x3D383B40,
    0x3B463B30,0x3D433B35,0x41403C3D,0x443D3D43,0x424C3D33,0x44493D38,0x48463E40,0x4A433F46,
    0x14283520,0x16263626,0x1A23372E,0x1D203734,0x1A2E3723,0x1D2B3729,0x20283831,0x23253937,
    0x21333826,0x2331392B,0x272D3A34,0x292B3B39,0x27383A29,0x29363B2E,0x2D333C36,0x30303D3C,
    0x2D3E3C2B,0x303B3D31,0x34383E39,0x36363E3F,0x34433E2E,0x36413E34,0x3A3D3F3C,0x3C3B4042,
    0x3A493F31,0x3D464036,0x4043413F,0x43404244,0x414E4134,0x434C4239,0x47484342,0x4A464447,
    0x132B3A22,0x16293B27,0x19253C30,0x1C233D35,0x19313C25,0x1C2E3D2A,0x202B3E32,0x22283E38,
    0x20363E27,0x22343E2D,0x26303F35,0x292E403B,0x263B3F2A,0x29394030,0x2C364138,0x2F33423E,
    0x2D41412D,0x2F3E4232,0x333B433B,0x35384440,0x33464330,0x35444435,0x3940453E,0x3C3E4543,
    0x394C4533,0x3C494538,0x40464640,0x42434746,0x40514735,0x434F473B,0x464B4843,0x49494949,
    //odd
    0x18181818,0x19161A1E,0x1A121E26,0x1A10212C,0x1A1D1E1B,0x1A1B2120,0x1B172529,0x1C15272E,
    0x1B23251E,0x1C202723,0x1D1D2B2B,0x1E1A2E31,0x1D282B20,0x1E262E26,0x1F22312E,0x20203434,
    0x1F2D3223,0x202B3429,0x21283831,0x21253A37,0x21333826,0x21303A2B,0x222D3E34,0x232A4139,
    0x22383E29,0x2336412E,0x24324436,0x2530473C,0x243E452C,0x253C4831,0x26384B39,0x27364E3F,
    0x1D1B1719,0x1E181A1F,0x1F151D27,0x1F12202D,0x1F201E1C,0x1F1E2022,0x201A242A,0x21182630,
    0x2025241F,0x21232724,0x22202A2D,0x231D2D32,0x222B2A22,0x23282D27,0x2425312F,0x24223335,
    0x24303124,0x242E332A,0x262A3732,0x26283A38,0x26363727,0x26333A2D,0x27303D35,0x282D403B,
    0x273B3E2A,0x2839402F,0x29354438,0x2A33463D,0x2941442D,0x2A3E4732,0x2B3B4B3B,0x2C384D40,
    0x221D171B,0x221B1920,0x23181D29,0x24151F2E,0x23231D1E,0x24201F23,0x251D232B,0x261A2631,
    0x25282320,0x26262626,0x27222A2E,0x28202C34,0x272E2A23,0x282B2C29,0x29283031,0x29253337,
    0x29333026,0x2931332B,0x2A2D3634,0x2B2B3939,0x2A383629,0x2B36392E,0x2C323D36,0x2D303F3C,
    0x2C3E3D2B,0x2D3B3F31,0x2E384339,0x2F35463F,0x2E43442E,0x2F414634,0x303E4A3C,0x303B4D42,
    0x2720161C,0x271E1822,0x281A1C2A,0x29181F30,0x28261C1F,0x29231F24,0x2A20222D,0x2B1D2532,
    0x2A2B2322,0x2B292527,0x2C252930,0x2C232B35,0x2C302924,0x2C2E2C2A,0x2D2A2F32,0x2E283238,
    0x2D362F27,0x2E33322D,0x2F303635,0x302D383B,0x2F3B362A,0x30393830,0x31353C38,0x32333F3E,
    0x31403C2D,0x323E3F32,0x333A423B,0x33384540,0x33464330,0x34444635,0x3540493E,0x353E4C43,
    0x2B23151E,0x2C211823,0x2D1D1B2B,0x2E1B1E31,0x2D281C20,0x2E261E26,0x2F22222E,0x2F202434,
    0x2F2E2223,0x302B2429,0x31282831,0x31252B37,0x31332826,0x31312B2B,0x322D2F34,0x332B3139,
    0x32382F29,0x3336312E,0x34323536,0x3530373C,0x343E352B,0x353B3831,0x36383B39,0x36353E3F,
    0x36433B2E,0x36413E34,0x373D423C,0x383B4442,0x38494231,0x38474537,0x3943493F,0x3A414B45,
    0x3026151F,0x31231725,0x32201B2D,0x331D1D33,0x322B1B22,0x33291D27,0x34252130,0x34232435,
    0x34302125,0x342E242A,0x352A2732,0x36282A38,0x35362827,0x36332A2D,0x37302E35,0x382D303B,
    0x373B2E2A,0x38393030,0x39353438,0x3A33373E,0x3940342D,0x3A3E3732,0x3B3B3B3B,0x3B383D40,
    0x3B463B30,0x3B433D35,0x3C40413D,0x3D3D4443,0x3D4C4233,0x3D494438,0x3E464840,0x3F434A46,
    0x35281420,0x36261626,0x37231A2E,0x37201D34,0x372E1A23,0x372B1D29,0x38282031,0x39252337,
    0x38332126,0x3931232B,0x3A2D2734,0x3B2B2939,0x3A382729,0x3B36292E,0x3C332D36,0x3D30303C,
    0x3C3E2D2B,0x3D3B3031,0x3E383439,0x3E36363F,0x3E43342E,0x3E413634,0x3F3D3A3C,0x403B3C42,
    0x3F493A31,0x40463D36,0x4143403F,0x42404344,0x414E4134,0x424C4339,0x43484742,0x44464A47,
    0x3A2B1322,0x3B291627,0x3C251930,0x3D231C35,0x3C311925,0x3D2E1C2A,0x3E2B2032,0x3E282238,
    0x3E362027,0x3E34222D,0x3F302635,0x402E293B,0x3F3B262A,0x40392930,0x41362C38,0x42332F3E,
    0x41412D2D,0x423E2F32,0x433B333B,0x44383540,0x43463330,0x44443535,0x4540393E,0x453E3C43,
    0x454C3933,0x45493C38,0x46464040,0x47434246,0x47514035,0x474F433B,0x484B4643,0x49494949,
};

*/

void on_frame() {
}

int drawMCUs(JPEGDRAW *pDraw) {

  if (pDraw->x > 320 || pDraw->y > 240) {
    return 0;
  }

  int xLimit = min(pDraw->iWidth + pDraw->x, 320) - pDraw->x;
  int yLimit = min(pDraw->iHeight + pDraw->y, 240);

  // Serial.printf("Draw pos = %d,%d. size = %d x %d\n", pDraw->x, pDraw->y, pDraw->iWidth, pDraw->iHeight);

  for (int y = pDraw->y, row = 0; y < yLimit; y++, row++) {
    memcpy(&_lines[y][pDraw->x], ((uint8_t*)pDraw->pPixels) + row * pDraw->iWidth, xLimit);
  }

  return 1; // returning true (1) tells JPEGDEC to continue decoding. Returning false (0) would quit decoding immediately.
}

void print(String s) {
  for(int x = 0; x < s.length(); x++) {
    draw_char(_lines, s[x], x+5, 15, 254, 0);
  }
}

int eoi(uint8_t* data, uint16_t size) {
  if (size >= 2) {
    for(int i=0; i<size-1; i++) {
      if(data[i] == 0xFF && data[i+1] == 0xD9) {
        return i+2;
      }
    }  
  }
  return -1;
}

void setup() {
    setCpuFrequencyMhz(240);
    Serial.begin(115200);

    uint8_t* _front_buffer = (uint8_t*)calloc(240*320, 1);
    _lines = (uint8_t**) malloc(240 * sizeof(uint8_t*));
    for (int y = 0; y < 240; y++) {
      _lines[y] = _front_buffer + y*320;
    }

    for(int i = 0; i < BUFFERED_FRAMES; i++) {
      if (i < RAW_FRAME_BUFFER_FRAMES) {
        buffer[i].data = &rawFrameBuffer[i * MAX_FRAME_BUFFER];
      } else {
        buffer[i].data = (uint8_t*) malloc(MAX_FRAME_BUFFER);
        if (!buffer[i].data) {
          Serial.print("failed to allocate frame buffer ");
          Serial.println(i);
        }
      }
      buffer[i].size = 0;
    }

    print("Connecting...");

    video_init(blacknwhite_4_phase_pal, 256, false);

    xTaskCreatePinnedToCore(render, "render", 1024, NULL, 1, NULL, 0);

    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    
    Serial.print("Connecting");
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");

    if (udp.listen(PORT)) {
      Serial.print("WiFi connected. UDP Listening on IP: ");
      String ip = WiFi.localIP().toString();

      Serial.println(ip);

      print(ip);

      udp.onPacket([](AsyncUDPPacket packet) {

          PacketBuffer* currentBuffer = &buffer[writeIndex % BUFFERED_FRAMES];
          int split = eoi(packet.data(), packet.length());

          int packet_length = packet.length();
          if (split != -1) {
            packet_length = split;
          }
          if (!discard && ((currentBuffer->size + packet_length) < MAX_FRAME_BUFFER)) {
            memcpy(&currentBuffer->data[currentBuffer->size], packet.data(), packet_length);
            currentBuffer->size += packet_length;
          } else {
            Serial.print("buffer exceeded - ignoring packet ");
            Serial.println(currentBuffer->size);
            discard = (split == -1); // discard until we find the end of this frame
          }
          if (split != -1) {
            writeIndex++;
            // assuming always packet size < frame buffer size
            currentBuffer = &buffer[writeIndex % BUFFERED_FRAMES];
            currentBuffer->size = packet.length() - split;
            if (currentBuffer->size > 0) {
              memcpy(&currentBuffer->data, packet.data() + split, currentBuffer->size);
              Serial.println("split packet ");
            }
          }

      });
    } else {
      Serial.println("failed to listen");
    }
}

void loop() {
}

void render(void* ignored) {

  esp_task_wdt_delete(xTaskGetIdleTaskHandleForCPU(0));

  unsigned long lastFrame = 0;

  for(;;) {
    unsigned long now = millis();
    if (readIndex < writeIndex && ((now - lastFrame) >= PER_FRAME_DELAY_MS)) {  // force fps
      PacketBuffer* currentBuffer = &buffer[readIndex % BUFFERED_FRAMES];
      // if (jpeg.openFLASH((uint8_t *)sample_image, sizeof(sample_image), drawMCUs)) {
      if (jpeg.openRAM(currentBuffer->data, currentBuffer->size, drawMCUs)) {
        jpeg.setPixelType(EIGHT_BIT_GRAYSCALE);
        if (!jpeg.decode(0, 0, JPEG_LUMA_ONLY)) {
          Serial.println("failed to decode");
        }
        jpeg.close();
      } else {
        Serial.println("failed to open");
      }
      readIndex++;
      lastFrame = now;
    }
  }
}